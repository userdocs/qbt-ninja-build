name: mcm ninja build - docker

on:
  workflow_dispatch:
    inputs:
      skip_rerun:
        description: "Skip rerun?"
        required: true
        default: false
        type: boolean
      retries:
        description: "Number of rerun retries"
        required: true
        default: "2"
        type: choice
        options: ["1", "2", "3", "4", "5", "6", "7", "8", "9"]

concurrency:
  group: mcm-ninja-build
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-24.04 # needs to be ubuntu-24.04 for qemu-user-static loongarch64 support
    name: ${{ matrix.arch }}
    permissions:
      contents: write
      id-token: write
      attestations: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64-linux-musl
            binary_name: aarch64
          - arch: arm-linux-musleabi
            binary_name: armv5
          - arch: arm-linux-musleabihf
            binary_name: armhf
          - arch: armv6-linux-musleabihf
            binary_name: armv6
          - arch: armv7l-linux-musleabihf
            binary_name: armv7
          - arch: i686-linux-musl
            binary_name: x86
          - arch: x86_64-linux-musl
            binary_name: x86_64
          - arch: mips-linux-musl
            binary_name: mips
          - arch: mips64-linux-musl
            binary_name: mips64
          - arch: mips64el-linux-musl
            binary_name: mips64el
          - arch: mipsel-linux-musl
            binary_name: mipsel
          - arch: powerpc-linux-musl
            binary_name: powerpc
          - arch: powerpc64le-linux-musl
            binary_name: powerpc64le
          - arch: s390x-linux-musl
            binary_name: s390x
          - arch: riscv64-linux-musl
            binary_name: riscv64
          - arch: loongarch64-linux-musl
            binary_name: loongarch64

    steps:
      - name: Host - checkout
        uses: actions/checkout@v4

      - name: Host - update
        run: sudo apt-get update

      - name: Host - set up qemu-user-static binfmt-support
        run: sudo apt-get install libpipeline1 qemu-user-static binfmt-support

      - name: Host - Create docker crossbuild container
        run: >
          docker run --name crossbuild -it -d
          -e "LDFLAGS=-s -static --static"
          -w /home/github
          -v ${{ github.workspace }}:/home/github
          ghcr.io/userdocs/qbt-musl-cross-make:${{ matrix.arch }}

      - name: Host - Git clone ${{ matrix.name }}
        run: git clone --no-tags --single-branch --branch master --depth=1 "https://github.com/ninja-build/ninja.git"

      - name: Create tag env
        working-directory: ninja
        run: printf '%s\n' "ninja_github_tag=$(cat src/version.cc | sed -rn 's|const char\* kNinjaVersion = "(.*)";|\1|p' | sed 's/\.git//g')" >> $GITHUB_ENV

      - name: Docker - Configure ${{ matrix.binary_name }}
        run: >
          docker exec -w /home/github/ninja crossbuild
          cmake -B build
          -D CMAKE_BUILD_TYPE="Release"
          -D CMAKE_CXX_STANDARD="20"
          -D CMAKE_INSTALL_PREFIX=/home/github/install
          -D BUILD_TESTING=off

      - name: Docker - Cmake Build ${{ matrix.binary_name }}
        run: >
          docker exec -w /home/github/ninja crossbuild
          cmake --build build --parallel --config Release

      - name: Docker - Cmake Install ${{ matrix.binary_name }}
        run: >
          docker exec -w /home/github/ninja crossbuild
          cmake --install build

      - name: Host - Rename ${{ matrix.binary_name }} to ${{ env.release_asset }}
        run: mv -f ${{ github.workspace }}/install/bin/ninja ninja-${{ matrix.binary_name }}

      - name: Host - ninja-${{ matrix.binary_name }} --version
        run: ./ninja-${{ matrix.binary_name }} --version >> $GITHUB_STEP_SUMMARY

      - name: Host - crossbuild binary info via file
        run: file ./ninja-${{ matrix.binary_name }} >> $GITHUB_STEP_SUMMARY

      - name: Host - signed build provenance attestations
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: ninja-${{ matrix.binary_name }}

      - name: Upload artifact - ${{ matrix.binary_name }}
        uses: actions/upload-artifact@v4
        with:
          name: ninja-${{ matrix.binary_name }}
          path: ninja-${{ matrix.binary_name }}

      - name: "Create release"
        uses: ncipollo/release-action@v1
        with:
          prerelease: false
          artifacts: ninja-${{ matrix.binary_name }}
          replacesArtifacts: true
          tag: v${{ env.ninja_github_tag }}
          name: ${{ matrix.name }} ${{ env.ninja_github_tag }}
          allowUpdates: true
          token: ${{ github.token }}

  ci-auto-rerun-failed-jobs:
    if: failure() && (github.event.inputs.skip_rerun || 'false') == 'false'
    needs: [build]
    concurrency:
      group: ci-auto-rerun-failed-jobs
      cancel-in-progress: true
    permissions:
      actions: write
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: "${{ secrets.AUTO_RERUN || github.token }}"
      github_repo: "" # To use ci-auto-rerun-failed-jobs.yml hosted in a remote repository else default to the current repository. Requires PAT token AUTO_RERUN
    steps:
      - uses: actions/checkout@v4
      - name: ci-auto-rerun-failed-jobs via ${{ env.github_repo || github.repository }}
        run: >
          gh workflow run ci-auto-rerun-failed-jobs-action.yml
          --repo "${{ env.github_repo || github.repository }}"
          -f github_repo=${{ github.repository }}
          -f run_id=${{ github.run_id }}
          -f attempts=${{ github.run_attempt }}
          -f retries=${{ github.event.inputs.retries || '1' }}
          -f distinct_id=${{ github.event.inputs.distinct_id }}
